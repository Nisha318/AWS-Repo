AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: "Configuring and Deploying Amazon VPC for a 3-Tier Web App - Nisha Prudhomme"
Resources:
    EC2NetworkInterface:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "Interface for NAT Gateway ${EC2NatGateway}"
            PrivateIpAddress: "10.0.1.62"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.0.1.62"
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: false

    EC2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Allows application to access the RDS instances"
            GroupName: "WordpressRDS-SG"
            Tags: 
              - 
                Key: "Name"
                Value: "WordpressRDS-SG"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup2
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                FromPort: !GetAtt RDSDBCluster.Endpoint.Port
                IpProtocol: "tcp"
                ToPort: !GetAtt RDSDBCluster.Endpoint.Port
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    RDSDBSubnetGroup:
        Type: "AWS::RDS::DBSubnetGroup"
        Properties:
            DBSubnetGroupDescription: "Subnet group for RDS"
            DBSubnetGroupName: "wordpressrdssubnetgroup"
            SubnetIds: 
              - !Ref EC2Subnet3
              - !Ref EC2Subnet4

    RDSDBCluster:
        Type: "AWS::RDS::DBCluster"
        Properties:
            AvailabilityZones: 
              - !GetAtt EC2Subnet3.AvailabilityZone
              - !GetAtt EC2Subnet.AvailabilityZone
              - !Sub "${AWS::Region}f"
            BackupRetentionPeriod: 1
            DatabaseName: "Population"
            DBClusterIdentifier: "wordpressdbcluster"
            DBClusterParameterGroupName: "default.aurora-mysql5.7"
            DBSubnetGroupName: "wordpressrdssubnetgroup"
            Engine: "aurora-mysql"
            Port: !GetAtt RDSDBInstance.Endpoint.Port
            MasterUsername: "admin"
            MasterUserPassword: "REPLACEME"
            PreferredBackupWindow: "06:28-06:58"
            PreferredMaintenanceWindow: "wed:08:55-wed:09:25"
            VpcSecurityGroupIds: 
              - "sg-024e13eafa0b761f8"
            StorageEncrypted: true
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/3fa1aa78-b234-4ab1-a2d2-18ab8b1fa493"
            EngineVersion: "5.7.mysql_aurora.2.07.2"
            EnableIAMDatabaseAuthentication: false
            EngineMode: "provisioned"
            DeletionProtection: true
            EnableHttpEndpoint: false

    RDSDBInstance:
        Type: "AWS::RDS::DBInstance"
        Properties:
            DBInstanceIdentifier: "wordpressdbcluster-instance-1"
            DBInstanceClass: "db.t3.small"
            Engine: "aurora-mysql"
            DBName: "Population"
            PreferredBackupWindow: "06:28-06:58"
            AvailabilityZone: !GetAtt EC2Subnet3.AvailabilityZone
            PreferredMaintenanceWindow: "mon:09:25-mon:09:55"
            MultiAZ: false
            EngineVersion: "5.7.mysql_aurora.2.07.2"
            AutoMinorVersionUpgrade: true
            LicenseModel: "general-public-license"
            PubliclyAccessible: false
            StorageType: "aurora"
            Port: !GetAtt RDSDBInstance2.Endpoint.Port
            DBClusterIdentifier: "wordpressdbcluster"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/3fa1aa78-b234-4ab1-a2d2-18ab8b1fa493"
            MonitoringInterval: 0
            PromotionTier: 1
            EnablePerformanceInsights: false
            DBSubnetGroupName: "wordpressrdssubnetgroup"
            VPCSecurityGroups: 
              - "sg-024e13eafa0b761f8"
            DBParameterGroupName: "default.aurora-mysql5.7"
            OptionGroupName: "default:aurora-mysql-5-7"
            CACertificateIdentifier: "rds-ca-2019"

    RDSDBInstance2:
        Type: "AWS::RDS::DBInstance"
        Properties:
            DBInstanceIdentifier: !Sub "wordpressdbcluster-instance-1-${EC2Subnet.AvailabilityZone}"
            DBInstanceClass: "db.t3.small"
            Engine: "aurora-mysql"
            DBName: "Population"
            PreferredBackupWindow: "06:28-06:58"
            AvailabilityZone: !GetAtt EC2Subnet.AvailabilityZone
            PreferredMaintenanceWindow: "tue:09:37-tue:10:07"
            MultiAZ: false
            EngineVersion: "5.7.mysql_aurora.2.07.2"
            AutoMinorVersionUpgrade: true
            LicenseModel: "general-public-license"
            PubliclyAccessible: false
            StorageType: "aurora"
            Port: 3306
            DBClusterIdentifier: "wordpressdbcluster"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/3fa1aa78-b234-4ab1-a2d2-18ab8b1fa493"
            MonitoringInterval: 0
            PromotionTier: 1
            EnablePerformanceInsights: false
            DBSubnetGroupName: "wordpressrdssubnetgroup"
            VPCSecurityGroups: 
              - "sg-024e13eafa0b761f8"
            DBParameterGroupName: "default.aurora-mysql5.7"
            OptionGroupName: "default:aurora-mysql-5-7"
            CACertificateIdentifier: "rds-ca-2019"

    EC2VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "10.0.0.0/16"
            EnableDnsSupport: true
            EnableDnsHostnames: false
            InstanceTenancy: "default"
            Tags: 
              - 
                Key: "Name"
                Value: "Wordpress-VPC"

    EC2VPCGatewayAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            InternetGatewayId: !Ref EC2InternetGateway
            VpcId: !Ref EC2VPC

    EC2SecurityGroup2:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Allows ALB to access the EC2 instances"
            GroupName: "WordpressEC2-SG"
            Tags: 
              - 
                Key: "Name"
                Value: "WordpressEC2-SG"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup3
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup3
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                FromPort: 8443
                IpProtocol: "tcp"
                ToPort: 8443
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup3:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Allow web access"
            GroupName: "WordPressALB-SG"
            Tags: 
              - 
                Key: "Name"
                Value: "WordpressALB-SG"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2Subnet:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet2.AvailabilityZone
            CidrBlock: "10.0.1.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: "PublicSubnet1"

    EC2Subnet2:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet4.AvailabilityZone
            CidrBlock: "10.0.11.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: "PrivateSubnet1"

    EC2Subnet3:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet5.AvailabilityZone
            CidrBlock: "10.0.14.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: "PrivateSubnet4"

    EC2Subnet4:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}a"
            CidrBlock: "10.0.13.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: "PrivateSubnet3"

    EC2Subnet5:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet6.AvailabilityZone
            CidrBlock: "10.0.2.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: "PublicSubnet2"

    EC2Subnet6:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}b"
            CidrBlock: "10.0.12.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: "PrivateSubnet2"

    EC2NatGateway:
        Type: "AWS::EC2::NatGateway"
        Properties:
            SubnetId: !Ref EC2Subnet
            Tags: 
              - 
                Key: "Name"
                Value: "WordPressVPCNATGateway"
            AllocationId: !GetAtt EC2EIP.AllocationId

    EC2InternetGateway:
        Type: "AWS::EC2::InternetGateway"
        Properties:
            Tags: 
              - 
                Key: "Name"
                Value: "WordPressInternetGateway"

    EC2Route:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref EC2InternetGateway
            RouteTableId: !Ref EC2RouteTable2

    EC2EIP:
        Type: "AWS::EC2::EIP"
        Properties:
            Domain: "vpc"

    EC2EIPAssociation:
        Type: "AWS::EC2::EIPAssociation"
        Properties:
            AllocationId: !GetAtt EC2EIP.AllocationId
            NetworkInterfaceId: "eni-02113393f5b1538c6"
            PrivateIpAddress: "10.0.1.62"

    EC2RouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC

    EC2RouteTable2:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags: 
              - 
                Key: "Name"
                Value: "PublicRouteTable"

    EC2RouteTable3:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags: 
              - 
                Key: "Name"
                Value: "PrivateRouteTable"

    EC2Route2:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            NatGatewayId: !Ref EC2NatGateway
            RouteTableId: !Ref EC2RouteTable3

    EC2SubnetRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable2
            SubnetId: !Ref EC2Subnet5

    EC2SubnetRouteTableAssociation2:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable2
            SubnetId: !Ref EC2Subnet

    EC2SubnetRouteTableAssociation3:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable3
            SubnetId: !Ref EC2Subnet4

    EC2SubnetRouteTableAssociation4:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable3
            SubnetId: !Ref EC2Subnet6

    EC2SubnetRouteTableAssociation5:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable3
            SubnetId: !Ref EC2Subnet2

    EC2SubnetRouteTableAssociation6:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable3
            SubnetId: !Ref EC2Subnet3

