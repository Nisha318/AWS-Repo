---
description: "Automatically revokes non-compliant inbound SSH/RDP rules (0.0.0.0/0 or ::/0) on a Security Group."
schemaVersion: '0.3'
parameters:
  SecurityGroupId:
    type: String
    description: "ID of the Security Group reported as non-compliant by AWS Config."
mainSteps:
  - name: GetNonCompliantRules
    action: 'aws:executeScript'
    outputs:
      - Name: NonCompliantRules
        Selector: "$.Payload.NonCompliantRules"
        Type: String
    inputs:
      Runtime: python3.9
      Handler: get_rules
      Script: |
        import boto3
        import json

        def get_rules(events, context):
            # The Security Group ID is passed from the main parameters
            sg_id = events['SecurityGroupId']
            ec2 = boto3.client('ec2')
            non_compliant_rules = []

            try:
                # 1. Describe the Security Group
                response = ec2.describe_security_groups(GroupIds=[sg_id])
                ip_permissions = response['SecurityGroups'][0].get('IpPermissions', [])

                # 2. Iterate through ingress rules to find non-compliant ones
                for rule in ip_permissions:
                    # Check for SSH (22) or RDP (3389)
                    if rule.get('FromPort') in [22, 3389] and rule.get('ToPort') == rule.get('FromPort'):
                        # Check for 'World Accessible' CIDR blocks
                        for ip_range in rule.get('IpRanges', []):
                            cidr = ip_range.get('CidrIp')
                            if cidr in ['0.0.0.0/0']: # Targeting IPv4
                                # Found a non-compliant rule, prepare for revocation
                                non_compliant_rules.append({
                                    'IpProtocol': rule.get('IpProtocol', 'tcp'),
                                    'FromPort': rule['FromPort'],
                                    'ToPort': rule['ToPort'],
                                    'CidrIp': cidr
                                })
                        # Add logic for IPv6 if required (::/0 in Ipv6Ranges)

                return {'NonCompliantRules': json.dumps(non_compliant_rules)}

            except Exception as e:
                # Log the error and allow the automation to stop gracefully
                print(f"Error processing SG {sg_id}: {e}")
                return {'NonCompliantRules': '[]'}

  - name: RevokeNonCompliantRules
    action: 'aws:branch'
    inputs:
      Choices:
        - NextStep: RevokeRules
          Not:
            Variable: "{{GetNonCompliantRules.NonCompliantRules}}"
            StringEquals: "[]"
      Default: CompliantMessage # If '[]' is returned, skip to the end

  - name: RevokeRules
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.9
      Handler: revoke_rules
      Script: |
        import boto3
        import json

        def revoke_rules(events, context):
            sg_id = events['SecurityGroupId']
            # Get the list of rules from the previous step's output
            rules_to_revoke = json.loads(events['NonCompliantRules'])
            ec2 = boto3.client('ec2')
            revoked_count = 0

            # Prepare the IpPermissions structure for the API call
            ip_permissions = []
            for rule in rules_to_revoke:
                ip_permissions.append({
                    'IpProtocol': rule['IpProtocol'],
                    'FromPort': rule['FromPort'],
                    'ToPort': rule['ToPort'],
                    'IpRanges': [{'CidrIp': rule['CidrIp']}]
                })

            if ip_permissions:
                print(f"Attempting to revoke {len(ip_permissions)} rule(s) from SG: {sg_id}")
                # 3. Perform the decisive remediation action (RevokeIngress)
                response = ec2.revoke_security_group_ingress(
                    GroupId=sg_id,
                    IpPermissions=ip_permissions
                )
                revoked_count = len(ip_permissions)
                print(f"Successfully revoked rules. Response: {response}")

            return {'RevokedCount': revoked_count}

  - name: CompliantMessage
    action: 'aws:sleep'
    inputs:
      Duration: 'PT1S' # Wait 1 second
    isEnd: true