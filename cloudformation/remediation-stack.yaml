AWSTemplateFormatVersion: '2010-09-09'
Description: RMF Project 1 - Automated remediation for over-permissive EC2 Security Groups (AC-4, SC-7) using AWS Config and Lambda.

Parameters:
  FunctionName:
    Type: String
    Default: ConfigSGRevokerLambda
    Description: Name for the Lambda function.

Resources:
  # 1. IAM Role for the Lambda Function (Principle of Least Privilege)
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [ lambda.amazonaws.com ] }
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole' # For CloudWatch Logs
      Policies:
        - PolicyName: LambdaEC2RevokerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  # Required EC2 actions for enforcement
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:RevokeSecurityGroupIngress'
                Resource: '*' 

  # 2. The Remediation Lambda Function
  RemediationLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref FunctionName
      Handler: index.lambda_handler
      Runtime: python3.11
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        # The Lambda code is placed directly here for simple deployment
        ZipFile: |
          import boto3
          import json
          
          ec2_client = boto3.client('ec2')
          
          def lambda_handler(event, context):
              print(f"Received event: {json.dumps(event)}")
              
              try:
                  # Config passes the resource ID in the 'resourceId' parameter
                  sg_id = event['resourceId']
              except KeyError:
                  try:
                      sg_id = event['detail']['resourceId']
                  except Exception:
                      print("ERROR: Could not find Security Group ID. Exiting.")
                      return {'statusCode': 400, 'body': 'Missing Security Group ID'}

              print(f"Processing Security Group: {sg_id}")
              
              try:
                  response = ec2_client.describe_security_groups(GroupIds=[sg_id])
                  sg_data = response['SecurityGroups'][0]
              except Exception as e:
                  print(f"ERROR: Failed to describe SG {sg_id}. Details: {e}")
                  raise
          
              rules_to_revoke = []
              
              for permission in sg_data.get('IpPermissions', []):
                  from_port = permission.get('FromPort')
                  to_port = permission.get('ToPort')
                  protocol = permission.get('IpProtocol')
          
                  is_high_risk_port = (from_port == 22 and to_port == 22) or \
                                     (from_port == 3389 and to_port == 3389)
          
                  if is_high_risk_port:
                      for ip_range in permission.get('IpRanges', []):
                          cidr = ip_range.get('CidrIp')
                          if cidr in ['0.0.0.0/0', '::/0']:
                              print(f"FOUND VIOLATION: {protocol}:{from_port}-{to_port} from {cidr}")
                              rules_to_revoke.append({
                                  'IpProtocol': protocol,
                                  'FromPort': from_port,
                                  'ToPort': to_port,
                                  'CidrIp': cidr
                              })

              if not rules_to_revoke:
                  print("INFO: No non-compliant rules found. Remediation skipped.")
                  return {'statusCode': 200, 'body': 'Compliance check passed.'}
          
              try:
                  print(f"REVOKING {len(rules_to_revoke)} rule(s) on SG {sg_id}.")
                  ec2_client.revoke_security_group_ingress(
                      GroupId=sg_id,
                      IpPermissions=rules_to_revoke
                  )
                  print("SUCCESS: Non-compliant rules revoked. Compliance restored.")
                  
                  return {'statusCode': 200, 'body': 'Remediation successful.'}
                  
              except Exception as e:
                  print(f"FATAL ERROR during revocation: {e}")
                  raise
      
  # 3. AWS Config Managed Rule (Detection/Auditing - CA-7)
  ConfigRule:
    Type: 'AWS::Config::ConfigRule'
    Properties:
      ConfigRuleName: 'Restricted-SSH-RDP-Revoker'
      Description: Flags Security Groups allowing 0.0.0.0/0 or ::/0 ingress on 22 or 3389.
      Source:
        Owner: AWS
        SourceIdentifier: VPC_SG_OPEN_ONLY_TO_AUTHORIZED_PORTS # FIX 1: Correct Identifier
      Scope:
        ComplianceResourceTypes:
          - 'AWS::EC2::SecurityGroup'
      InputParameters:
        authorizedTcpPorts: '22,3389' 

 # 4. Lambda Permission (Allows Config to call the function)
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref RemediationLambda
      Principal: 'config.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt ConfigRule.Arn

  # 5. AWS Config Remediation Action (Enforcement - AC-4, SC-7)
  VpcSgRemediationConfig:
    Type: 'AWS::Config::RemediationConfiguration'
    # FIX 5: Explicit dependency to prevent "Could not find SSM document..." error
    DependsOn: RemediationLambda 
    
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    
    Properties:
      ConfigRuleName: !Ref ConfigRule # FIX 3: REQUIRED property to link to the rule
      TargetType: SSM_DOCUMENT        # FIX 2: Required due to API constraint for Lambda remediation
      
      # FIX 4: Use the Function Name and $LATEST version, which satisfies the API
      TargetId: !Ref FunctionName 
      TargetVersion: "$LATEST" 
      
      Automatic: true
      MaximumAutomaticAttempts: 1
      RetryAttemptSeconds: 60
      
      # FIX 4: Ensure correct YAML indentation for the Parameters block
      Parameters:
        resourceId:
          ResourceValue:
            Value: RESOURCE_ID