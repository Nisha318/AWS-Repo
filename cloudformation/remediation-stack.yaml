AWSTemplateFormatVersion: '2010-09-09'
Description: RMF Project 1 - Automated remediation for over-permissive EC2 Security Groups (AC-4, SC-7) using AWS Config, SSM Automation, and Lambda.

Parameters:
  FunctionName:
    Type: String
    Default: ConfigSGRevokerLambda
    Description: Name for the Lambda function.

Resources:
  # 1) IAM role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [ lambda.amazonaws.com ] }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaEC2RevokerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeSecurityGroups
                  - ec2:RevokeSecurityGroupIngress
                Resource: "*"

  # 2) Remediation Lambda
  RemediationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Handler: index.lambda_handler
      Runtime: python3.11
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json

          ec2 = boto3.client('ec2')

          def lambda_handler(event, context):
              print(f"Received event: {json.dumps(event)}")

              sg_id = None
              if isinstance(event, dict):
                  sg_id = event.get('resourceId') or event.get('detail', {}).get('resourceId')
              if not sg_id:
                  return {"statusCode": 400, "body": "Missing Security Group ID"}

              # Describe SG
              resp = ec2.describe_security_groups(GroupIds=[sg_id])
              sg = resp['SecurityGroups'][0]

              ip_permissions_to_revoke = []

              for p in sg.get('IpPermissions', []):
                  proto = p.get('IpProtocol')
                  from_port = p.get('FromPort')
                  to_port = p.get('ToPort')

                  high_risk = (from_port == 22 and to_port == 22) or (from_port == 3389 and to_port == 3389)
                  if not high_risk:
                      continue

                  # IPv4 ranges
                  for r in p.get('IpRanges', []):
                      if r.get('CidrIp') == '0.0.0.0/0':
                          ip_permissions_to_revoke.append({
                              'IpProtocol': proto,
                              'FromPort': from_port,
                              'ToPort': to_port,
                              'IpRanges': [{'CidrIp': '0.0.0.0/0'}]
                          })

                  # IPv6 ranges
                  for r6 in p.get('Ipv6Ranges', []):
                      if r6.get('CidrIpv6') == '::/0':
                          ip_permissions_to_revoke.append({
                              'IpProtocol': proto,
                              'FromPort': from_port,
                              'ToPort': to_port,
                              'Ipv6Ranges': [{'CidrIpv6': '::/0'}]
                          })

              if not ip_permissions_to_revoke:
                  print("No non-compliant rules found.")
                  return {"statusCode": 200, "body": "Compliant"}

              ec2.revoke_security_group_ingress(
                  GroupId=sg_id,
                  IpPermissions=ip_permissions_to_revoke
              )
              print(f"Revoked {len(ip_permissions_to_revoke)} rule(s) on {sg_id}")
              return {"statusCode": 200, "body": "Remediation successful"}

  # 3) AWS Config managed rule (detection)
  ConfigRule:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: Restricted-SSH-RDP-Revoker
      Description: Flags Security Groups allowing 0.0.0.0/0 or ::/0 ingress on 22 or 3389.
      Source:
        Owner: AWS
        SourceIdentifier: VPC_SG_OPEN_ONLY_TO_AUTHORIZED_PORTS
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::SecurityGroup
      InputParameters:
        authorizedTcpPorts: '22,3389'

  # 4) SSM Automation role (assumed by Automation)
  AutomationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ssm.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AutomationPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeSecurityGroups
                  - ec2:RevokeSecurityGroupIngress
                Resource: "*"
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: "*"

  # 5) SSM Automation document that invokes the Lambda
  RemediateOpenSgDoc:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: '0.3'
        description: Invoke Lambda to remediate open SGs on ports 22/3389.
        assumeRole: "{{ AutomationAssumeRole }}"
        parameters:
          SecurityGroupId:
            type: String
          AutomationAssumeRole:
            type: String
          LambdaFnName:
            type: String
        mainSteps:
          - name: CallLambda
            action: aws:invokeLambdaFunction
            inputs:
              FunctionName: "{{ LambdaFnName }}"
              Payload: |
                { "resourceId": "{{ SecurityGroupId }}" }

  # 6) AWS Config remediation configuration pointing to the SSM document
  VpcSgRemediationConfig:
    Type: AWS::Config::RemediationConfiguration
    DependsOn: RemediateOpenSgDoc
    Properties:
      ConfigRuleName: !Ref ConfigRule
      TargetType: SSM_DOCUMENT
      TargetId: !Ref RemediateOpenSgDoc   # SSM document name
      TargetVersion: "1"                  # first published version
      Automatic: true
      MaximumAutomaticAttempts: 1
      RetryAttemptSeconds: 60
      Parameters:
        AutomationAssumeRole:
          StaticValue:
            Values: [ !GetAtt AutomationRole.Arn ]
        SecurityGroupId:
          ResourceValue:
            Value: RESOURCE_ID
        LambdaFnName:
          StaticValue:
            Values: [ !Ref FunctionName ]
